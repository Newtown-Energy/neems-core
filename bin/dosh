#!/usr/bin/env bash
# Do - The Simplest Build Tool on Earth.
# Documentation and examples see https://github.com/8gears/do
#
SCRIPTNAME=`basename "$0"`
BASEDIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/..
cd ${BASEDIR}

_install_cranelift() {
    echo "‚û°Ô∏è Setting up Cranelift build environment..."

    # Check for rustup
    if ! command -v rustup >/dev/null 2>&1; then
        echo "‚ùå Error: rustup not found. Please install Rust first: https://rustup.rs/"
        exit 1
    fi

    # Check for nightly toolchain
    if ! rustup toolchain list | grep -q nightly; then
        echo "üîÑ Nightly toolchain not found. Installing..."
        rustup toolchain install nightly
    fi

    # Check for Cranelift component
    local cranelift_path="$HOME/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_cranelift-*.so"
    if [ -z "$(ls $cranelift_path 2>/dev/null)" ]; then
        echo "üîÑ Cranelift backend not found. Installing..."
        rustup component add rustc-codegen-cranelift-preview --toolchain nightly

        # Verify installation succeeded
	if [ -z "$(ls $cranelift_path 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è Cranelift installation failed. Falling back to regular build..."
            cargo build "$@"
            return
        fi
    fi
}

build() {
    # Build the dev project.  Don't use cranelift for release builds.
    echo "üöÄ Building with Cranelift for faster dev compilation..."
    RUSTFLAGS="-Zcodegen-backend=cranelift" cargo +nightly build "$@"
}

migrate() {
    # Install diesel command line tool
    which diesel > /dev/null || cargo binstall diesel_cli

    # Make sure we have a database url
    if [ -z "$DATABASE_URL" ]; then echo "DATABASE_URL not set"; exit 0; fi

    # Create database if needed
    [ ! -f "$DATABASE_URL" ] && diesel setup

    diesel migration run
}

push() {
    # We only need to send the binary, not the entire project
    rsync target/release/neems-core root@newtown.energy:/opt/neems/core
}

test() {
    # Create temp file for test output
    tmpfile=$(mktemp)

    # Build first with cranelift
    build || {
	echo "‚ùå Build failed. Skipping tests."
	return 1
    }

    # Build and run command line
    cmd=(RUSTFLAGS="-Zcodegen-backend=cranelift" cargo +nightly test --color=always "$@")
    # cmd=(cargo test --color always "$@")
    script -q -e -c "$(printf "%q " "${cmd[@]}")" /dev/null \
      | tee "$tmpfile" \
      | grep -v 'Building' \
      | sed -E $'s/\x1b\\]8;[^\\]*\\\\//g;
      	s/\x1b\\\\//g; 
        s/\x1b\\(B//g;' \
      | perl -pe 's/(?<!\r)\n/\r\n/g' \
      | perl -pe 's/^M/\r\n/g' \
      | perl -pe 's/^M/\r\n/g' 
    
    # Remove ANSI color codes and OSC 8 hyperlinks from the tmpfile
    sed -i -E $'
      s/\x1b\\]8;[^\\]*\\\\//g;      # Remove OSC 8 hyperlink start
      s/\x1b\\\\//g;                 # Remove OSC 8 hyperlink end
      s/\x1b\\[[0-9;]*m//g;          # Remove ANSI color codes
      s/\x1b\\(B//g;                 # Remove ESC ( B
    ' "$tmpfile"

    
    summarize-tests "$tmpfile"

    # Copy the test output to the clipboard, minus color and hyperlink codes
    wl-files -q "$tmpfile" 

    # Cleanup
    rm "$tmpfile"
}

watch() {
    echo "Running Neems Core for development purposes..."
    cargo --list | grep -Eq '^    watch$' || cargo install cargo-watch
    cargo watch -x run
}

"$@" # <- execute the task
[ "$#" -gt 0 ] || printf "Usage:\n\t./${SCRIPTNAME} %s\n" "($(compgen -A function | grep '^[^_]' | paste -sd '|' -))"

