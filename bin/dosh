#!/usr/bin/env bash
# Do - The Simplest Build Tool on Earth.
# Documentation and examples see https://github.com/8gears/do
#
SCRIPTNAME=`basename "$0"`
BASEDIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/..
cd ${BASEDIR}


DEV_TEST_FLAGS="--color=always -p neems-core"

_install_cranelift() {
    echo "➡️ Ensuring we have a Cranelift build environment..."

    # Check for rustup
    if ! command -v rustup >/dev/null 2>&1; then
        echo "❌ Error: rustup not found. Please install Rust first: https://rustup.rs/"
        exit 1
    fi

    # Check for nightly toolchain
    if ! rustup toolchain list | grep -q nightly; then
        echo "🔄 Nightly toolchain not found. Installing..."
        rustup toolchain install nightly
    fi

    # Check for Cranelift component
    local cranelift_path="$HOME/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_cranelift-*.so"
    if [ -z "$(ls $cranelift_path 2>/dev/null)" ]; then
        echo "🔄 Cranelift backend not found. Installing..."
        rustup component add rustc-codegen-cranelift-preview --toolchain nightly

        # Verify installation succeeded
	if [ -z "$(ls $cranelift_path 2>/dev/null)" ]; then
            echo "⚠️ Cranelift installation failed. Falling back to regular build..."
            cargo build "$@"
            return
        fi
    fi
}

build() {
    # Install Cranelift if not already installed
    _install_cranelift

    # Build the dev project.  Don't use cranelift for release builds.
    echo "🚀 Building with Cranelift for faster dev compilation..."
    RUSTFLAGS="-Zcodegen-backend=cranelift" cargo +nightly build $DEV_FLAGS "$@" || {
	echo "❌ Build failed. Please check the output above."
	return 1
    }
}

check() {
    local cmd="check $DEV_FLAGS"
    RUSTFLAGS="-Zcodegen-backend=cranelift" cargo +nightly $cmd "$@" 2>&1 | tee >(ansi2txt | wl-copy) 
}

migrate() {
    # Install diesel command line tool
    which diesel > /dev/null || cargo binstall diesel_cli

    # Make sure we have a database url
    if [ -z "$DATABASE_URL" ]; then echo "DATABASE_URL not set"; exit 0; fi

    # Create database if needed
    [ ! -f "$DATABASE_URL" ] && diesel setup

    diesel migration run
}

nextest() {
    # You can get ansi2txt in the Debian colorized-logs package
    local cmd="nextest run $DEV_FLAGS"
    RUSTFLAGS="-Zcodegen-backend=cranelift" cargo +nightly $cmd "$@" 2>&1 | tee >(ansi2txt | wl-copy) 
}

push() {
    # We only need to send the binary, not the entire project
    rsync target/release/neems-core root@newtown.energy:/opt/neems/core
}

release() {
    flags="--features fixphrase"
    cargo build --release $flags "$@"
}

test() {
    nextest "$@"
}

test-trad() {
    # You can get ansi2txt in the Debian colorized-logs package
    local cmd="test $DEV_TEST_FLAGS --quiet"
    RUSTFLAGS="-Zcodegen-backend=cranelift" cargo +nightly $cmd "$@" 2>&1 | tee >(ansi2txt | wl-copy) 
}


watch() {
    echo "Running Neems Core for development purposes..."
    cargo --list | grep -Eq '^    watch$' || cargo install cargo-watch
    cargo watch -x run
}

"$@" # <- execute the task
[ "$#" -gt 0 ] || printf "Usage:\n\t./${SCRIPTNAME} %s\n" "($(compgen -A function | grep '^[^_]' | paste -sd '|' -))"

